Git 远程库的创建与关联

终于到了这一步，学Git的目的就是为了分布式管理编写文件。之前我学到了Git的基本操作：
创建本地的仓库resposity ; 
对本地仓库的内容进行更新和提交 ;
暂存区和工作区的概念 ;
查询版本更改信息 ;
转换版本 ;
撤销工作区改动，撤销暂存区的改动。

  这些都是Git的基本操作，这些内容都是在本地完成。但是目前我在实验室上的电脑学习Git，笔记也是在实验室的电脑中存放，但我回到寝室，用寝室电脑的时候却无法继续编辑我的笔记。恩，现在开始学习如何解决这个问题，这也是我学习Git的初衷之一。用windows的GitHub客户端自然可以很随意的完成文件的上传，但学习了Git，我现在才逐渐了解到Git的真正用处和真正的优势。Git与网盘是绝对不同的(以前一直当网盘用）！

  Git的是分布式版本控制系统，只要有一台主机拥有resposity并且开机联网，那么在别的主机上都可以从这个主机中下载resposity和提交更改。但我在实验室的电脑不可能一直开着，并且就算我一直开着，我的电脑也不是Git服务器，我在寝室也不能直接输入命令从实验室电脑中调文件。这时候，github出现了，github是一个免费的网站，从名字上就可以大概知道它是Git的什么东西，事实也确实如此。github网站为使用Git的用户提供免费的仓库管理。这个是什么意思呢？github是一个服务器，只要我们把本地的resposity传给它一份，它就可以通过24小时的运行来协助我们随时随地的Git使用。当使用github后，加上我实验室的电脑和寝室的电脑，就一共有3个仓库。我的两台电脑不能直接相连，但我可以用github，以它为中间节点，将我的两台电脑相连。

  github的注册和resposity的创建完成后，我需要做的事情就是将github中我创建的仓库与我实验室电脑的本地仓库关联到一起。否则大家各玩各的那我还用个什么东西南北风。github使用SSH加密来当做仓库的门锁。只有拥有相同SSH秘钥的两个仓库才可以相互传送信息。对于实验室的电脑（Linux Mint），在用户的主目录下搜索是否有.ssh的目录，如果没有，那么输入：
ssh-keygen -t rsa -C "youremail@whatever.com"
就可以在本地目录下创建一个ssh目录。在输入命令后，下面会提示你保存信息到哪里，密码是什么。联系的话就都默认，密码没有就行。ssh目录下有两个文件 id_rsa 和 id_rsa.pub 。这两个文件就是SSH Key 的密钥对，id_rsa是私钥，不能泄露出去；id_rsa.pub是公钥，可以放心的告诉他人。我们在关联仓库的时候使用的就是公钥。在github的setting中选择SSH Key,并添加一个SSH Key ，就给了github实验室电脑的钥匙。后面的操作就能继续进行。

  在SSH Key创建完成后，输入：
git remote add orgin git@github.com:smallbal/learnGit.git
就将本地的仓库迁移导了github上的learngit仓库中。这一条是教程中的命令。github在创建好一个resposity后提示的迁移命令是：
git remote add origin https://github.com/smallbal/learnGit.git
不同在于网址，我用的是github上给的，后面也因为这样出现了一些变化。
Github给出的网址不止一个，所以才会有上面两条命令。实际上，Git支持多种协议，https 出了速度慢意外，最大的麻烦就是每次推送都必须输入口令。教程用的是ssh协议。
orgin是我们本地仓库的同步名称，默认为origin,当然这个可以修改。后面的网址就是推送的目的地。
  在迁移完成后，我们就可以把本地苦短内容推送到远程库中，使用：
git push -u origin master
这个命令要在本地库的目录中输入。实际上是把当前分支master推送到远程。
  由于远程库是空的，第一次推送master分支时，加了一个 -u 参数。Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程master分支关联起来。在以后的推送或者拉取时就可以简化命令了。从现在起，提交可以用：
git push origin master

